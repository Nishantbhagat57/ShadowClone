# Define custom function directory
ARG FUNCTION_DIR="/function"

FROM python:3.11-buster as build-image

# Include global arg in this stage of the build
ARG FUNCTION_DIR

# Install aws-lambda-cpp build dependencies
RUN apt-get update && \
  apt-get install -y \
  g++ \
  make \
  cmake \
  unzip \
  git \
  libcurl4-openssl-dev \
  glibc-source

# Copy function code
RUN mkdir -p ${FUNCTION_DIR}

# Update pip
RUN pip install -U pip wheel six setuptools

# Install the function's dependencies
RUN pip install \
    --target ${FUNCTION_DIR} \
        awslambdaric \
        boto3 \
        redis \
        httplib2 \
        requests \
        numpy \
        scipy \
        pandas \
        pika \
        kafka-python \
        cloudpickle \
        ps-mem \
        tblib \
        delegator.py \
        invoke

FROM python:3.11-buster

# Include global arg in this stage of the build
ARG FUNCTION_DIR
# Set working directory to function root directory
WORKDIR ${FUNCTION_DIR}

# Copy in the built dependencies
COPY --from=build-image ${FUNCTION_DIR} ${FUNCTION_DIR}

# Add Lithops
COPY lithops_lambda.zip ${FUNCTION_DIR}
RUN unzip lithops_lambda.zip \
    && rm lithops_lambda.zip \
    && mkdir handler \
    && touch handler/__init__.py \
    && mv entry_point.py handler/

# Put your dependencies/tools here, using RUN pip install... or RUN apt install...

ENV HOME="/tmp"
RUN mkdir "/tmp/.config"
RUN chmod -R a+rwx "/tmp"

COPY ./bins/eget /usr/local/bin/eget 

RUN eget projectdiscovery/subfinder --to /usr/local/bin

RUN eget projectdiscovery/httpx --to /usr/local/bin

RUN eget projectdiscovery/nuclei --to /usr/local/bin

RUN eget projectdiscovery/tlsx --to /usr/local/bin

RUN eget projectdiscovery/dnsx --to /usr/local/bin

RUN eget ffuf/ffuf --to /usr/local/bin

RUN eget epi052/feroxbuster --asset x86_64-linux-feroxbuster.tar.gz --to /usr/local/bin

RUN eget optiv/Go365 --to /usr/local/bin

RUN eget hahwul/dalfox --to /usr/local/bin

RUN eget d3mondev/puredns --to /usr/local/bin

RUN git clone https://github.com/0xjbb/static-nmap.git /static-nmap && chmod +x /static-nmap/nmap

RUN curl -o /function/resolvers.txt -LO https://raw.githubusercontent.com/janmasarik/resolvers/master/resolvers.txt

RUN git clone https://github.com/projectdiscovery/nuclei-templates /nuclei-templates


RUN wget https://go.dev/dl/go1.22.3.linux-amd64.tar.gz
RUN tar -xvf go1.22.3.linux-amd64.tar.gz
RUN rm go1.22.3.linux-amd64.tar.gz
RUN mv go /usr/local

RUN wget https://nodejs.org/dist/latest/node-v22.4.0-linux-x64.tar.gz
RUN tar -xvf node-v22.4.0-linux-x64.tar.gz
RUN cp -r node-v22.4.0-linux-x64/{bin,include,lib,share} /usr

RUN apt-get update
RUN apt-get install -y git gcc make libpcap-dev
RUN git clone https://github.com/robertdavidgraham/masscan && chmod 777 masscan/* && cd masscan && make -j

COPY ./bins/massdns /usr/local/bin/massdns

COPY ./bins/fff /usr/local/bin/fff

ENTRYPOINT [ "/usr/local/bin/python", "-m", "awslambdaric" ]

CMD [ "handler.entry_point.lambda_handler" ]
